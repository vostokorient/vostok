// Пример использования двухуровневой адресации

#include <iostream>
using namespace std;
int main()
{
    int n,*p,**q;
    p=&n;
    q=&p;
    
    n=100;
    (*p)+=5;
    (**q)--;

    cout<<n<<"\n";
    cout<<*p<<"\n";
    cout<<**q<<"\n";
    cout<<p<<"\n";
    cout<<q<<"\n";

    return 0;
}

/* В программе командой int n,*p,**q объявляется целочисленная пере-
менная n и два указателя: указатель p на переменную типа int и указатель
q на указатель для указателя на переменную типа int. В качестве значения
указателю p командой p=&n присваивается адрес ячейки n, а указатель q
получает в качестве значения адрес ячейки, в которую записано значение
переменной-указателя p (команда q=&p). Обращаем внимание читателя на
то, что обе указанные операции выполнены до того, как переменной n при-
своено значение. Такая ситуация является корректной, поскольку память
для переменной n выделяется при ее объявлении. Следовательно, даже
если переменной значение еще не присвоено, адрес области памяти, куда
это значение будет заноситься, доступен.
После выполнения команд n=100 и (*p)+=5 значение переменной n ста-
новится равным 105. После этого данное значение уменьшается на едини-
цу – вследствие выполнения команды (**q)--. В данном случае мы вос-
пользовались тем, что *q есть значение, записанное по адресу q (по адресу
q записан указатель p), а **q – это значение, записанное по адресу *q (т.е.
значение, записанное по адресу p, а это переменная n). Результат выполне-
ния команды может иметь следующий вид:

104
104
104
0012FF7C
0012FF78

Неизменными являются первые три строки вывода результата. Две послед-
ние строки – значения (адреса) указателей. Они могут отличаться от тех,
что приведены выше. */