// В листинге показано динамическое выделение и освобождение памяти.
#include <iostream>
using namespace std;

int main()
{
// Выделение памяти для int
int* pointsToAnAge = new int;

// Использование выделенной памяти
cout << "Введите возраст собаки: ";
cin >> *pointsToAnAge;

// Применение оператора разыменования *
cout << "Возраст " << *pointsToAnAge << " хранится по "
<< "адресу " << pointsToAnAge << endl;

delete pointsToAnAge; // Освобождение памяти
return 0;
}

/* 

Результат
Введите возраст собаки: 9
Возраст 9 хранится по адресу 0x00338120

Строка 8 демонстрирует использование оператора new для выделения памяти под
целое число, в которой планируется хранить введенный пользователем возраст собаки. 
Обратите внимание, что оператор n ew возвращает указатель, который сохраняется
путем присваивания. Введенный пользователем возраст сохраняется в этой выделенной 
области памяти, а поток cin обращается к ней в строке 12, используя оператор *.
Строки 15 и 16 отображают значение возраста; при этом снова используется оператор
разыменования. Здесь же выводится адрес области памяти, в которой хранится этот
возраст. Содержавшийся в указателе pointsToAnAge адрес в строке 15 остается тем
же, который был возвращен оператором new в строке 8, — он с тех пор не изменялся.

Если не освободить выделенную память по окончании ее использования, она останется 
выделенной и недоступной для последующ их выделений вашему или иным
приложениям. Такая ут ечка памяти может привести даже к замедлению работы 
приложения или компьютера в целом, и ее следует избегать любой ценой.
*/