#include <iostream>

int add(int a, int b)
{
return a + b;
}

int multiply(int c, int d)
{
return c * d;
}

int main()
{
std::cout << add(7, 8) << std::endl; // внутри функции add(): a = 7, b = 8,
std::cout << multiply(4, 5) << std::endl; // внутри функции multiply(): c = 4, d = 5,

// Мы можем передавать целые выражения в качестве аргументов
std::cout << add(2 + 3, 4 * 5) << std::endl; // внутри функции add(): a = 5, b = 20,

// Мы можем передавать переменные в качестве аргументов
int x = 4;
std::cout << add(x, x) << std::endl; // будет 4 + 4

std::cout << add(1, multiply(2, 3)) << std::endl; // будет 1 + (2 * 3)
std::cout << add(1, add(2, 3)) << std::endl; // будет 1 + (2 + 3)

return 0;
}

/* Результат выполнения программы:
15
20
25
8
7
6
С первыми двумя вызовами всё понятно.
В третьем вызове, параметрами являются выражения, которые сначала
нужно обработать. 2 + 3 = 5 и результат 5 присваивается переменной a . 4
* 5 = 20 и результат 20 присваивается переменной b . Результатом
выполнения функции add(5, 20) является значение 25 .
Следующая пара относительно легкая:
1 int x = 4;
2 std::cout << add(x, x) << std::endl; // будет 4 + 4
Здесь уже a = x и b = x . Поскольку x = 4 , то add(x, x) = add(4, 4) .
Результат — 8 .
Теперь рассмотрим вызов посложнее:
1 std::cout << add(1, multiply(2, 3)) << std::endl; // будет 1 + (2 * 3)
При выполнении этого стейтмента процессор должен определить
значения параметров a и b функции add(). С параметром a всё понятно —
мы передаём значение 1 ( a = 1 ). А вот чтобы определить значение
параметра b , нам необходимо выполнить операцию умножения:
multiply(2, 3) , результат — 6 . Затем add(1, 6) возвращает число 7 ,
которое и выводится на экран.
Короче говоря:
add(1, multiply(2, 3)) => add(1, 6) => 7
Последний вызов может показаться немного сложным из-за того, что
параметром функции add() является другой вызов add():
1 std::cout << add(1, add(2, 3)) << std::endl; // будет 1 + (2 + 3)
Но здесь всё аналогично примеру выше. Перед тем, как процессор
вычислит внешний вызов функции add(), он должен обработать
внутренний вызов функции add(2, 3) . add(2, 3) = 5 . Затем процессор
обрабатывает функцию add(1, 5) , результатом которой является
значение 6 . Затем 6 передаётся в std::cout.
Короче говоря:
add(1, add(2, 3)) => add(1, 5) => 6  */